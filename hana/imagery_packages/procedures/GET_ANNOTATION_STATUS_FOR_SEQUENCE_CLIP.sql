CREATE OR REPLACE PROCEDURE GET_ANNOTATION_STATUS_FOR_SEQUENCE_CLIP
(
	IN SEQUENCE_CLIP_UUID VARCHAR(36),
	OUT ANNOTATION_STATUS TABLE
			(
				ANNOTATION_SOURCE VARCHAR(50),
				ANALYSIS_TYPE     VARCHAR(20),
				ANNOTATION_PACKAGE_EXISTS_FLAG BOOLEAN
			)
)
LANGUAGE SQLSCRIPT AS
BEGIN

	ANNOTATION_STATUS =
		select distinct 
			ANNOTATION_SOURCE, 
			ANALYSIS_TYPE, 
			CASE WHEN SUM(ANNOTATION_PACKAGE_EXISTS_FLAG) > 0
				THEN TRUE
				ELSE FALSE
			END as ANNOTATION_PACKAGE_EXISTS_FLAG
		from 
		(
			select ANNOTATION_SOURCE, 
					ANALYSIS_TYPE, 
					0 as ANNOTATION_PACKAGE_EXISTS_FLAG
			from IMAGERY_ANALYSIS_TYPE
			UNION ALL
			(
				select distinct 
					ANNOTATION_SOURCE, 
					ANALYSIS_TYPE, 
					1 as ANNOTATION_PACKAGE_EXISTS_FLAG
				from ANNOTATION_PACKAGE_DATA_CARD C
		        where ANNOTATION_PACKAGE_UUID in 
				(
					select distinct ANNOTATION_PACKAGE_UUID
					from SEQUENCE_CLIP_FRAME_LABEL
					where SEQUENCE_CLIP_UUID = :SEQUENCE_CLIP_UUID
					UNION
					select distinct ANNOTATION_PACKAGE_UUID
					from SEQUENCE_FRAME_FACE_ANNOTATION
					where SEQUENCE_CLIP_UUID = :SEQUENCE_CLIP_UUID
					UNION
					select distinct ANNOTATION_PACKAGE_UUID
					from SEQUENCE_FRAME_TEXT_ANNOTATION
					where SEQUENCE_CLIP_UUID = :SEQUENCE_CLIP_UUID
					UNION
					select distinct ANNOTATION_PACKAGE_UUID
					from SEQUENCE_FRAME_TRACK_ANNOTATION SQTA
					inner join SEQUENCE_FRAME SF
						on SF.SEQUENCE_FRAME_UUID = SQTA.SEQUENCE_FRAME_UUID
					where SF.SEQUENCE_CLIP_UUID = :SEQUENCE_CLIP_UUID
				)
			)
		) 
		group by ANNOTATION_SOURCE, ANALYSIS_TYPE;
END;
