CREATE OR REPLACE PROCEDURE GET_DOWNLOAD_REQUEST_SIZE_AND_TIME_ESTIMATES
(
	IN OBJECT_TYPE VARCHAR(20),
	IN OBJECT_UUID VARCHAR(36),
	IN INCLUDE_FRAMES BOOLEAN,
	IN INCLUDE_ANNOTATIONS BOOLEAN,
	OUT ESTIMATED_ZIP_CONTENT_SIZE_BYTES BIGINT,
	OUT ESTIMATED_BUILD_TIME_SECONDS BIGINT,
	OUT ZIP_FILE_COUNT BIGINT
)
LANGUAGE SQLSCRIPT AS
BEGIN

 	DECLARE ObjectTypeNotValid condition for sql_error_code 10002;
	
	DECLARE FRAME_CLIP_UUID VARCHAR(36);
	DECLARE CURRENT_IMAGERY_PACKAGE_UUID VARCHAR(36);
	DECLARE OBJECT_FOUND BIGINT = 0;
	DECLARE ANNOTATIONS_COUNT BIGINT = 0;
	DECLARE OBJECT_COUNT BIGINT = 0;
	DECLARE OBJECTS_BYTE_COUNT BIGINT = 0;
	-- Estimated byte size of each annotation in its JSON form
	DECLARE ANNOTATION_SIZE_FACTOR BIGINT = 400;
	-- Estimated byte size of each telemetry entry in its JSON form
	DECLARE FRAME_TELEM_SIZE_FACTOR BIGINT = 2500;
	DECLARE CLIP_METADATA_SIZE_FACTOR BIGINT = 500;
	
	ESTIMATED_ZIP_CONTENT_SIZE_BYTES = 0;
	ESTIMATED_BUILD_TIME_SECONDS = 0;
	ZIP_FILE_COUNT = 0;
	
	if :OBJECT_TYPE = 'FRAME'
	then
		select count(1) into OBJECT_FOUND
		from SEQUENCE_FRAME_VIEW 
		where SEQUENCE_FRAME_UUID = :OBJECT_UUID;
		
		if :OBJECT_FOUND = 1
		then

			-- count includes the frame and the telemetry metadata file
			ZIP_FILE_COUNT = 2;

			select 
				F.FILE_SIZE_BYTES into ESTIMATED_ZIP_CONTENT_SIZE_BYTES
			from SEQUENCE_FRAME F
			inner join SEQUENCE_CLIP C 
				on C.SEQUENCE_CLIP_UUID = F.SEQUENCE_CLIP_UUID
			where F.SEQUENCE_FRAME_UUID = :OBJECT_UUID;
				

			if :INCLUDE_ANNOTATIONS = true
			then
				select count(1) into ANNOTATIONS_COUNT
				from SEQUENCE_FRAME_TRACK_ANNOTATION A
				where A.SEQUENCE_FRAME_UUID = :OBJECT_UUID
				and A.ANNOTATION_PACKAGE_UUID 
					in ( select ANNOTATION_PACKAGE_UUID 
						 from ANNOTATION_PACKAGE_DATA_CARD 
						 where INSERTION_TIMESTAMP 
							in ( select max(INSERTION_TIMESTAMP) 
								 from ANNOTATION_PACKAGE_DATA_CARD AP
								 inner join SEQUENCE_FRAME_TRACK_ANNOTATION A2 on
									A2.ANNOTATION_PACKAGE_UUID = AP.ANNOTATION_PACKAGE_UUID
								 where A2.SEQUENCE_FRAME_UUID = :OBJECT_UUID 
								 and LOWER(ANNOTATION_SOURCE) = 'annoai'
							   )
						);
				if :ANNOTATIONS_COUNT > 0
				then
					ZIP_FILE_COUNT = :ZIP_FILE_COUNT + 1;	
					ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
						:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + 
						(:ANNOTATIONS_COUNT * :ANNOTATION_SIZE_FACTOR);
				end if;
			end if;
			ESTIMATED_BUILD_TIME_SECONDS = 1;
		end if;
	elseif :OBJECT_TYPE = 'CLIP'
	then
		select count(1) into OBJECT_FOUND
		from SEQUENCE_CLIP_VIEW 
		where SEQUENCE_CLIP_UUID = :OBJECT_UUID;

		if :OBJECT_FOUND = 1
		then
			-- count includes the clip, video metadata json file, and 
			-- frame telemetry metadata file
			ZIP_FILE_COUNT = 3;
			ESTIMATED_ZIP_CONTENT_SIZE_BYTES = :CLIP_METADATA_SIZE_FACTOR;

			select 
				count(1), sum(F.FILE_SIZE_BYTES)
			into 
				OBJECT_COUNT, OBJECTS_BYTE_COUNT 
			from SEQUENCE_FRAME F
			inner join SEQUENCE_CLIP C 
				on C.SEQUENCE_CLIP_UUID = F.SEQUENCE_CLIP_UUID
			where F.SEQUENCE_CLIP_UUID = :OBJECT_UUID;
							
			if :INCLUDE_FRAMES = TRUE
			then
				ZIP_FILE_COUNT = :ZIP_FILE_COUNT + :OBJECT_COUNT;
				ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
					:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + :OBJECTS_BYTE_COUNT;
			end if;
			
			-- Add frames telemetry json file size estimate to byte count
			ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
				:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + 
				(:OBJECT_COUNT * :FRAME_TELEM_SIZE_FACTOR);
			
			select 
				C.FILE_SIZE_BYTES 
			into 
				OBJECTS_BYTE_COUNT
			from SEQUENCE_CLIP C
			inner join IMAGERY_PACKAGE_DATA_CARD I
				on I.IMAGERY_PACKAGE_UUID = C.IMAGERY_PACKAGE_UUID 
			where C.SEQUENCE_CLIP_UUID = :OBJECT_UUID;
				
			ESTIMATED_ZIP_CONTENT_SIZE_BYTES = :ESTIMATED_ZIP_CONTENT_SIZE_BYTES + :OBJECTS_BYTE_COUNT;			
			
			if :INCLUDE_ANNOTATIONS = true
			then
				select count(1) into ANNOTATIONS_COUNT
				from SEQUENCE_FRAME_TRACK_ANNOTATION A
				inner join SEQUENCE_FRAME F 
					on F.SEQUENCE_FRAME_UUID = A.SEQUENCE_FRAME_UUID
				where F.SEQUENCE_CLIP_UUID = :OBJECT_UUID
				and A.ANNOTATION_PACKAGE_UUID 
					in ( select ANNOTATION_PACKAGE_UUID 
						 from ANNOTATION_PACKAGE_DATA_CARD 
						 where INSERTION_TIMESTAMP 
							in ( select max(INSERTION_TIMESTAMP) 
								 from ANNOTATION_PACKAGE_DATA_CARD AP
								 inner join SEQUENCE_FRAME_TRACK_ANNOTATION A2 on
									A2.ANNOTATION_PACKAGE_UUID = AP.ANNOTATION_PACKAGE_UUID
								 inner join SEQUENCE_FRAME F on
									F.SEQUENCE_FRAME_UUID = A2.SEQUENCE_FRAME_UUID
								 where F.SEQUENCE_CLIP_UUID = :OBJECT_UUID 
								 and LOWER(ANNOTATION_SOURCE) = 'annoai'
							   )
						);
				if :ANNOTATIONS_COUNT > 0
				then
					ZIP_FILE_COUNT = :ZIP_FILE_COUNT + 1;					
					ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
						:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + 
						(:ANNOTATIONS_COUNT * :ANNOTATION_SIZE_FACTOR);
				end if;

			end if;
			ESTIMATED_BUILD_TIME_SECONDS = CEIL(:ZIP_FILE_COUNT / 2);

		end if;
	
	elseif :OBJECT_TYPE = 'IMAGERY_PACKAGE'
	then
		ZIP_FILE_COUNT = 0;
		
		select count(1) into OBJECT_FOUND
		from IMAGERY_PACKAGE_DATA_CARD
		where IMAGERY_PACKAGE_UUID = :OBJECT_UUID;

		if :OBJECT_FOUND = 1
		then
		
			select 
				count(1), sum(F.FILE_SIZE_BYTES)
			into 
				OBJECT_COUNT, OBJECTS_BYTE_COUNT 
			from SEQUENCE_FRAME F
			inner join SEQUENCE_CLIP C 
				on C.SEQUENCE_CLIP_UUID = F.SEQUENCE_CLIP_UUID
			where F.IMAGERY_PACKAGE_UUID = :OBJECT_UUID;

			if :INCLUDE_FRAMES = TRUE
			then
				ZIP_FILE_COUNT = :ZIP_FILE_COUNT + :OBJECT_COUNT;
				ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
					:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + :OBJECTS_BYTE_COUNT;
			end if;
			-- Add frame telemetry json file size estimate to byte count
			ESTIMATED_ZIP_CONTENT_SIZE_BYTES = 
				:ESTIMATED_ZIP_CONTENT_SIZE_BYTES +
				(:OBJECT_COUNT * :FRAME_TELEM_SIZE_FACTOR);

				
			select 
				count(1), sum(C.FILE_SIZE_BYTES)
			into 
				OBJECT_COUNT, OBJECTS_BYTE_COUNT 

			from SEQUENCE_CLIP C
			inner join IMAGERY_PACKAGE_DATA_CARD I
				on I.IMAGERY_PACKAGE_UUID = C.IMAGERY_PACKAGE_UUID 
				where C.IMAGERY_PACKAGE_UUID = :OBJECT_UUID;

			ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
				:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + :OBJECTS_BYTE_COUNT +
				(:OBJECT_COUNT * :CLIP_METADATA_SIZE_FACTOR);
				
			-- for every clip there is a clip file, metadata json file, and
			-- telemetry json file
			ZIP_FILE_COUNT = :ZIP_FILE_COUNT +
				(:OBJECT_COUNT * 3);
			
			if :INCLUDE_ANNOTATIONS = true
			then
				SEQUENCE_CLIP_LATEST_ANNOTATIONS_TIMESTAMP_TBL =
					
					select distinct 
						F.SEQUENCE_CLIP_UUID, 
						MAX(AP.INSERTION_TIMESTAMP) as INSERTION_TIMESTAMP
					from SEQUENCE_FRAME_TRACK_ANNOTATION A
					inner join ANNOTATION_PACKAGE_DATA_CARD AP
						on AP.ANNOTATION_PACKAGE_UUID = A.ANNOTATION_PACKAGE_UUID
					inner join SEQUENCE_FRAME F 
						on F.SEQUENCE_FRAME_UUID = A.SEQUENCE_FRAME_UUID
					where A.IMAGERY_PACKAGE_UUID = :OBJECT_UUID 
					and LOWER(AP.ANNOTATION_SOURCE) = 'annoai'	
					group by
						F.SEQUENCE_CLIP_UUID;
					
				select count(1) into ANNOTATIONS_COUNT
				from SEQUENCE_FRAME_TRACK_ANNOTATION A
				inner join SEQUENCE_FRAME F 
					on F.SEQUENCE_FRAME_UUID = A.SEQUENCE_FRAME_UUID
				inner join :SEQUENCE_CLIP_LATEST_ANNOTATIONS_TIMESTAMP_TBL T
					on F.SEQUENCE_FRAME_UUID = A.SEQUENCE_FRAME_UUID
				inner join ANNOTATION_PACKAGE_DATA_CARD AP
					on AP.ANNOTATION_PACKAGE_UUID = A.ANNOTATION_PACKAGE_UUID
				where A.IMAGERY_PACKAGE_UUID = :OBJECT_UUID
				and F.SEQUENCE_CLIP_UUID = T.SEQUENCE_CLIP_UUID
				and AP.INSERTION_TIMESTAMP = T.INSERTION_TIMESTAMP;

				if :ANNOTATIONS_COUNT > 0
				then
					ZIP_FILE_COUNT = :ZIP_FILE_COUNT + 1;					
					ESTIMATED_ZIP_CONTENT_SIZE_BYTES =
						:ESTIMATED_ZIP_CONTENT_SIZE_BYTES + 
						(:ANNOTATIONS_COUNT * :ANNOTATION_SIZE_FACTOR);
				end if;
			end if;

			ESTIMATED_BUILD_TIME_SECONDS = CEIL(:ZIP_FILE_COUNT / 2);

		end if;
	else
		signal ObjectTypeNotValid
			set message_text = ::CURRENT_OBJECT_NAME ||
							   ': Input parameter OBJECT_TYPE contains value "' ||
							   :OBJECT_TYPE ||
							   '" which is not a valid object type. ' ||
							   ' Valid values are : FRAME, CLIP, or IMAGERY_PACKAGE';
	end if;
	
END	